import groovy.json.JsonSlurper

pipeline {
    agent any
    stages {
        stage("Checkout") {
            steps{
                git 'https://github.com/igorgvero/vera-java-example.git'
            }
        }

        //SourceClear does a scan of open source libraries used by the app and provides feedback for vulnerabilities 
        stage("Veracode SrcClr Scan") {
            steps {
                script {
                    if(isUnix()) {
                        withCredentials([string(credentialsId: 'SRCCLR_API_TOKEN', variable: 'SRCCLR_API_TOKEN')]) {
                            sh label: '', script: 'curl -sSL https://download.sourceclear.com/ci.sh | sh'
                        }
                    } else {
                        withCredentials([string(credentialsId: 'SRCCLR_API_TOKEN', variable: 'SRCCLR_API_TOKEN')]) {
                            powershell label: '', script: 'Set-ExecutionPolicy AllSigned -Scope Process -Force;'
                            powershell label: '', script: 'iex ((New-Object System.Net.WebClient).DownloadString("https://download.srcclr.com/ci.ps1")); srcclr scan'
                        }
                    }
                } 
            }
        }

        stage("Veracode Greenlight Scan") {
            steps {
                script {
                    if(isUnix()) {
                         withMaven(maven: 'Maven') {
                            sh label: '', script: 'mvn clean verify'
                        }
                        withCredentials([usernamePassword(credentialsId: 'veracode-credentials', passwordVariable: 'veracode_key', usernameVariable: 'veracode_id')]) {
                            sh label: '', script: '''curl -O https://downloads.veracode.com/securityscan/gl-scanner-java-LATEST.zip'''
                            sh label: '', script: '''unzip gl-scanner-java-LATEST.zip -d target/gl-scanner-java-LATEST'''
                            sh label: '', script: '''java -jar "target/gl-scanner-java-LATEST/gl-scanner-java.jar" --api_id $veracode_id --api_secret_key $veracode_key --build_dir "target/classes" --issue_counts "3:0,2:0,1:0,0:0"'''
                            }
                    } else {
                        withMaven(maven: 'Maven') {
                            bat label: '', script: 'mvn clean verify'
                        }

                        withCredentials([usernamePassword(credentialsId: 'veracode-credentials', passwordVariable: 'veracode_key', usernameVariable: 'veracode_id')]) {
                            powershell label: '', script: '''$OutputFile = "target/gl-scanner-java-LATEST.zip"
                                                             $Url = "https://downloads.veracode.com/securityscan/gl-scanner-java-LATEST.zip"
                                                             $UnzippedOutputFolder = "target/gl-scanner-java-LATEST"
                                                             $UnzippedOutputFile = "target/gl-scanner-java-LATEST/gl-scanner-java.jar"
                                                             Invoke-WebRequest -OutFile $OutputFile -URI $Url
                                                             Add-Type -assembly "system.io.compression.filesystem"
                                                             [io.compression.zipfile]::ExtractToDirectory($OutputFile, $UnzippedOutputFolder)

                                                            java -jar $UnzippedOutputFile --api_id $env:veracode_id --api_secret_key $env:veracode_key --build_dir "target/classes" --issue_counts "3:0,2:0,1:0,0:0"
                                                            '''
                        }
                    }
                }
            }
        }

        stage("Build") {
            steps {
                script {
                    if(isUnix()) {
                        withMaven(maven: 'Maven') {
                            sh label: '', script: 'mvn clean package'
                        }
                    } else {
                        withMaven(maven: 'Maven') {
                            bat label: '', script: 'mvn clean package'
                        }
                    }
                }
            }   
        }

        
	    stage("DevOps Scan") {
            steps {
                script {
                    if(isUnix()) {
                        sh label: '', script: 'java -Ddevops.endpoint.url=https://agora-qa-postprod.topaz.veracode.io/devops/v3 -jar devops-scanner-java.jar -i e8ef83f48a01d5993fa337ebbf435b7e -k 3d9dd8deebe633a097c8a442c5b8fe562635fa20aa5088c3003c5e84e423b9c7757ca7b19a0f1ef3f8ff839cfdeda8c3d0841268407c214a92206010793b1328 -j "verademo.war"'                        
                        
                        //Store the results.json as a running artifact?
                        
                        
                        //Create an array of flaws for the current build
                        //def parsedResults = new JsonSlurper().parse(new File('/var/lib/jenkins/workspace/VeraInsecurePrivate/./results.json'))
                        def parsedResults = new JsonSlurper().parse(new File('results.json'))
                        

                        def flawHashArray = parsedResults.results.TestResults.Issues.Issue.FlawMatch.FlawHash
                        println(flawHashArray) //store this value to track new flaws?
                        def flawSeverityArray = parsedResults.results.TestResults.Issues.Issue.Severity
                        println(flawSeverityArray) 
                        
                        //Total flaws of severity 4 and 5
                        def disallowedFlawCount = 0
                        for (item in flawSeverityArray) {
                            if (item.toInteger() > 3) {
                                disallowedFlawCount += 1
                            }
                        }
                        println(disallowedFlawCount) //store this to warn on new high severity flaws?
                    }
                }
            }   
        }
    	
    	stage("Veracode Static Analysis") {
        	steps {
            	withCredentials([usernamePassword(credentialsId: 'veracode-credentials', passwordVariable: 'veracode_key', usernameVariable: 'veracode_id')]) {
                	veracode applicationName: 'JavaExample', criticality: 'VeryHigh', debug: true, fileNamePattern: '', replacementPattern: '', sandboxName: '', scanExcludesPattern: '', scanIncludesPattern: '', scanName: 'Jenkins - Build $buildnumber', teams: '', uploadExcludesPattern: '', uploadIncludesPattern: '**/**.jar', useIDkey: true, vid: env.veracode_id, vkey: env.veracode_key, vpassword: '', vuser: ''
            	}
            }
        }

        stage("Veracode Dynamic Analysis") {
        	steps {
            	withCredentials([usernamePassword(credentialsId: 'veracode-credentials', passwordVariable: 'veracode_key', usernameVariable: 'veracode_id')]) {
                	veracodeDynamicAnalysisResubmit analysisName: 'Sample Analysis', maximumDuration: 72, vid: env.veracode_id, vkey: env.veracode_key
            	}
            }
        }
    }
}
